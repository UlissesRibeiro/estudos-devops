name: Build de image Docker

on:
  pull_request:
    branches:
     - master

jobs:
  Build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Docker
        run: |
          #apt-get update
          sudo apt-get install curl -y
          sudo curl -fsSl https://get.docker.com | sh

      - name: Build image Docker
        run: |
          cd desafio-02/nginx/
          docker build -t nginx-custom:1.0 .
          docker run -dit --name nginx -p 8070:80 nginx-custom:1.0

      - name: Teste de conexão
        run: |
          sleep 5
          curl -lv http://localhost:8070

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ulissestark/nginx-custom

      - name: Build and push docker image to registry
        uses: docker/build-push-action@v5
        with:
          context: desafio-02/nginx/
          push: true
          tags: ulissestark/nginx-custom:1.0


      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_SSH_KEY}}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p 22 ${{secrets.SERVER_HOST}} >> ~/.ssh/known_hosts
          sudo apt-get install sshpass -y

      - name: Deploy to server
        run: |
          cd ~/.ssh
          ssh -i id_rsa ubuntu@ec2-34-234-172-22.compute-1.amazonaws.com
          cd /
          git pull
          cd estudos-devops/desafio-02/nginx/
          docker build -t nginx-custom:1.0 .
          docker run -dit --name nginx -p 8070:80 nginx-custom:1.0

      #- name: Generate artifact attestation
      #  uses: actions/attest-build-provenance@v1
      #  with:
      #    subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
      #    subject-digest: ${{ steps.push.outputs.digest }}
      #    push-to-registry: true
  #Testes:
  #  runs-on: ubuntu-latest
  #  needs: Build
  #  steps:
  #    - name: Teste de conexão
  #      uses: actions/checkout@v3#

  #    - name: Teste de conexão
  #      run: curl -lv http://localhost:8070